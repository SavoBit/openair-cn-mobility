#!/bin/bash
################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under 
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.  
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file run_spgw
# brief run script for S/P-GW (S-GW + P-GW).
# author  Lionel GAUTHIER
# company Eurecom
# email:  lionel.gauthier@eurecom.fr 


################################
# include helper functions
################################
THIS_SCRIPT_PATH=$(dirname $(readlink -f $0))
source $THIS_SCRIPT_PATH/../build/tools/build_helper

declare -i g_run_msc_gen=0
declare    g_msc_dir="/tmp"
declare    g_spgw_default_config_file="/usr/local/etc/oai/spgw.conf"

LIBGTPNL="LIBGTPNL"
LIBGTPNL_OVS="LIBGTPNL_OVS"
OPENFLOW_MOSAIC="OPENFLOW_MOSAIC"
OPENFLOW="OPENFLOW"
REST="REST"
GTPU_API=$OPENFLOW

OVS_GTPU_BRIDGE_NAME="gtpu"

set_openair_env 


function help()
{
  echo_error " "
  echo_error "Usage: run_spgw [OPTION]..."
  echo_error "Run the S/G-GW executable (S-GW + P-GW)."
  echo_error " "
  echo_error "Options:"
  echo_error "Mandatory arguments to long options are mandatory for short options too."
  echo_error "  -c, --config-file     file_abs_path Config file to be used by spgw if you don't want to use the default one: $g_spgw_default_config_file"
  echo_error "  -g, --gdb                           Run with GDB."
  echo_error "  -G, --gdb-cmd         cmd cmd_arg   Append this GDB cmd to GDB command file (ex1: break Attach.c:272, ex2: watch 0xffee0002)."
  echo_error "                                      All repetitions of this argument are valid."
  echo_error "  --gtpu       api                    GTPV1-U implementation, choice in [$LIBGTPNL, $OPENFLOW_MOSAIC, $OPENFLOW], default is $GTPU_API"
  echo_error "  -h, --help                          Print this help."
  echo_error "  -k, --kill                          Kill all running SPGW instances, exit script then."
  echo_error "  -m, --mscgen          directory     Generate mscgen output files in a directory"
  echo_error "  -v, --verbosity-level               Verbosity level (0,1,2)."
  echo_error "                                        0 -> ASN1 XER printf off"
  echo_error "                                        1 -> ASN1 XER printf on and ASN1 debug off"
  echo_error "                                        2 -> ASN1 XER printf on and ASN1 debug on"
}

function do_msc_gen()
{
  cd $g_msc_dir
  $THIS_SCRIPT_PATH/msc_gen
}

function control_c()
# run if user hits control-c
{
  echo_warning "\nExiting by ctrl+c\n"
  if [ $g_run_msc_gen -eq 1 ]; then 
    do_msc_gen
  fi
  exit $?
}

PIDFILE=/var/run/$NAME.pid
function main()
{
  local -i run_gdb=0
  local -i set_network_interfaces=0
  local    exe_arguments=" "
  local    spgw_config_file=$g_spgw_default_config_file
  local    breakpoint_location=""
  local -a gdb_args
  local -i gdb_index=0

  until [ -z "$1" ]
    do
    case "$1" in
      -c | --config-file)
        spgw_config_file=$2
        echo "setting config file to: $spgw_config_file"
        shift 2;
        ;;
      -g | --gdb)
        run_gdb=1
        echo "setting GDB flag to: $run_gdb"
        shift;
        ;;
      -G | --gdb-arg)
        run_gdb=1
        gdb_args[$gdb_index]="$2 $3"
        echo "Appending gdb args: ${gdb_args[$gdb_index]}"
        gdb_index=$((gdb_index + 1))
        shift 3;
        ;;
      --gtpu)
        list_include_item "$LIBGTPNL $OPENFLOW $OPENFLOW_MOSAIC" $2
        [[ $? -ne 0 ]] && echo_error "GTPV1U API type $2 not recognized or not available" && return $?
        GTPU_API=$2
        shift 2;
        ;;
      -h | --help)
        help
        return 0
        ;;
      -k | --kill)
        $SUDO killall -q spgw
        $SUDO rm /var/run/spgw.pid
        return 0
        shift;
        ;;
      -m | --mscgen)
        g_msc_dir=$2
        if [ -d  "$g_msc_dir" ]; then
          echo "setting mscgen log files to dir: $g_msc_dir"
          g_run_msc_gen=1
          shift 2;
        else
          echo_error "Mscgen log dir does not exist"
          return -1
        fi
        ;;      
      -v | --verbosity-level)
        local verbosity_level=$2
        echo "setting verbosity level to: $verbosity_level"
        exe_arguments="-v $verbosity_level $exe_arguments"
        shift 2;
        ;;
      *)   
        echo "Unknown option $1"
        help
        return 1
        ;;
    esac
  done

  set_openair_env 
  cecho "OPENAIR_DIR    = $OPENAIR_DIR" $green
  
  export ENABLE_"$GTPU_API"=1

  if [ ! -f $spgw_config_file ]; then 
    echo_error "Please provide -c|--config-file valid argument (\"$spgw_config_file\" not a valid file)"
    return 1
  fi


  if [ ! -e /usr/local/bin/spgw ]; then
    echo_error "Cannot find /usr/local/bin/mme executable, have a look at the output of build_spgw executable"
    return 1
  fi


  if [ $g_run_msc_gen -eq 1 ]; then 
    rm -f /tmp/openair.msc.*
  fi


  if [ -z ${ENABLE_OPENFLOW+x} ]  ||  [ -z ${ENABLE_OPENFLOW_MOSAIC+x} ]; then
    export PATH=$PATH:/usr/local/share/openvswitch/scripts

    $SUDO mkdir -m 777 -p /usr/local/var/log/openvswitch/
    
    # From http://www.openvswitch.org/support/dist-docs-2.5/INSTALL.md.html
    
    echo "Starting ovsdb-server..."
    $SUDO ovsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \
                 --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
                 --private-key=db:Open_vSwitch,SSL,private_key \
                 --certificate=db:Open_vSwitch,SSL,certificate \
                 --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
                 --pidfile --detach -log-file
    [[ $? -ne 0 ]] && echo_error "Failed to start ovsdb-server" && return $?
    
    # Then initialize the database using ovs-vsctl. This is only necessary the first
    # time after you create the database with ovsdb-tool (but running it at any time 
    # is harmless):
    echo "Init ovs db..."
    $SUDO ovs-vsctl --no-wait init
    [[ $? -ne 0 ]] && echo_error "Failed to init OVS db" && return $?
    
    # Then start the main Open vSwitch daemon, telling it to connect to the same 
    # Unix domain socket:
    echo "Starting vswitchd..."
    $SUDO ovs-vswitchd -v --pidfile --detach
    [[ $? -ne 0 ]] && echo_error "Failed to start vswitchd" && return $?
    echo_success "Started OVS"
    
    $SUDO ovs-vsctl --may-exist add-br $OVS_GTPU_BRIDGE_NAME
    [[ $? -ne 0 ]] && return $?
    
    ##########################
    # GTPV1-U INTERFACE
    ##########################
    s1u_nw_dev_string="SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP"
    s1u_nw_device="`cat $spgw_config_file | cut -d "#" -f1 | grep $s1u_nw_dev_string | tr -d " " | grep "="`"
    eval $s1u_nw_device
    
    # Port for GTPV1-U network device
    $SUDO ovs-vsctl add-port $OVS_GTPU_BRIDGE_NAME ${!s1u_nw_dev_string}
    
    ##########################
    # SGI INTERFACE
    ##########################
    sgi_nw_dev_string="PGW_INTERFACE_NAME_FOR_SGI"
    sgi_nw_device="`cat $spgw_config_file | cut -d "#" -f1 | grep $sgi_nw_dev_string | tr -d " " | grep "="`"
    eval $sgi_nw_device
    
    # Port for SGI network device
    $SUDO ovs-vsctl add-port $OVS_GTPU_BRIDGE_NAME ${!s1u_nw_dev_string}
    
  fi


  exe_arguments="-c $spgw_config_file $exe_arguments"

  if [ $run_gdb -eq 0 ]; then 
    # trap keyboard interrupt (control-c)
    trap control_c SIGINT
    $SUDO spgw  `echo $exe_arguments` 2>&1 
  else
    # trap keyboard interrupt (control-c) is done by gdb
    $SUDO touch      ~/.gdb_spgw
    $SUDO chmod 777  ~/.gdb_spgw
    $SUDO echo "file spgw" > ~/.gdb_spgw
    $SUDO echo "set args $exe_arguments "        >> ~/.gdb_spgw
    for i in ${gdb_args[@]}; do
      $SUDO echo "$i"                            >> ~/.gdb_mme
    done
    $SUDO echo "run"                             >> ~/.gdb_spgw
    $SUDO cat ~/.gdb_spgw
    $SUDO gdb -n -x ~/.gdb_spgw
    if [ $g_run_msc_gen -eq 1 ]; then 
      #$SUDO do_msc_gen
      cd $g_msc_dir
      $SUDO $THIS_SCRIPT_PATH/msc_gen --profile EPC --dir $g_msc_dir --type png
    fi
  fi
  return $?
}

main "$@"
